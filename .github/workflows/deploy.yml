name: Deploy to AWS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Terraform state backend (first run only)
      run: |
        # 检查S3存储桶是否存在
        if ! aws s3api head-bucket --bucket fortune-teller-terraform-state 2>/dev/null; then
          # 创建S3存储桶
          aws s3api create-bucket \
            --bucket fortune-teller-terraform-state \
            --region us-east-1
          
          # 启用版本控制
          aws s3api put-bucket-versioning \
            --bucket fortune-teller-terraform-state \
            --versioning-configuration Status=Enabled
        fi
        
        # 检查DynamoDB表是否存在
        if ! aws dynamodb describe-table --table-name fortune-teller-terraform-lock 2>/dev/null; then
          # 创建DynamoDB表用于状态锁定
          aws dynamodb create-table \
            --table-name fortune-teller-terraform-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region us-east-1
        fi
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    - name: Terraform Init
      run: |
        cd terraform/environments/production
        terraform init
      
    - name: Terraform Validate
      run: |
        cd terraform/environments/production
        terraform validate
    
    - name: Terraform Plan
      run: |
        cd terraform/environments/production
        terraform plan -var="google_api_key=${{ secrets.GOOGLE_API_KEY }}"
    
    - name: Terraform Apply
      run: |
        cd terraform/environments/production
        terraform apply -auto-approve -var="google_api_key=${{ secrets.GOOGLE_API_KEY }}"

    - name: Debug Terraform Output
      run: |
        cd terraform/environments/production
        terraform output api_repository_url
        terraform output -raw api_repository_url
    
    - name: Get ECR Repository URLs
      id: get-ecr-urls
      run: |
        cd terraform/environments/production
        # 只获取 Terraform 变量的值，并去除所有额外的空格和换行符
          API_REPO=$(terraform output -raw api_repository_url 2>/dev/null | grep -Eo '([a-zA-Z0-9-]+)\.dkr\.ecr\.[a-z0-9-]+\.amazonaws\.com/[a-zA-Z0-9_-]+' | head -1)
          APP_REPO=$(terraform output -raw app_repository_url 2>/dev/null | grep -Eo '([a-zA-Z0-9-]+)\.dkr\.ecr\.[a-z0-9-]+\.amazonaws\.com/[a-zA-Z0-9_-]+' | head -1) 
        # Debug 输出
        echo "Parsed API Repo URL: ${API_REPO}"
        echo "Parsed APP Repo URL: ${APP_REPO}"

        # 直接存入 GitHub 环境变量
        echo "API_REPO=${API_REPO}" >> $GITHUB_ENV
        echo "APP_REPO=${APP_REPO}" >> $GITHUB_ENV


    - name: Debug ECR URLs
      run: |
        echo "API Repo URL (from Terraform): ${{ steps.get-ecr-urls.outputs.api_repo_url }}"
        echo "App Repo URL (from Terraform): ${{ steps.get-ecr-urls.outputs.app_repo_url }}"
        echo "::group::Raw API_REPO"
        echo "${{ steps.get-ecr-urls.outputs.api_repo_url }}" | od -c
        echo "::endgroup::"


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push API image
      uses: docker/build-push-action@v3
      with:
        context: ./api
        push: true
        tags: ${{ env.API_REPO }}:latest

    - name: Build and push App image
      uses: docker/build-push-action@v3
      with:
        context: ./app
        push: true
        tags: ${{ env.APP_REPO }}:latest
    
    - name: Force ECS services to use new images
      run: |
        cd terraform/environments/production
        terraform apply -auto-approve -var="google_api_key=${{ secrets.GOOGLE_API_KEY }}"